name: 'Full Flow'

env:
  VERSION: 1.2.0
  #PACKAGE_SUFFIX: '-preview-03'
  PACKAGE_SUFFIX: ''
  ASM_VERSION: 1.0.0
  BUILD_TYPE: Release
  # Indicates the location of the vcpkg as a Git submodule of the project repository.
  #VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  # Tells vcpkg where binary packages are stored.
  # VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

  workflow_dispatch:

jobs:
  # builds native codecs binary for all supported OSes
  build-native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
        include:
          - os: windows-latest
            triplet: ${{ matrix.arch }}x64-windows-static
            cconfig: Release
          - os: ubuntu-latest
            triplet: ${{ matrix.arch }}-linux
            cconfig: RelWithDebInfo
          - os: macos-latest
            triplet: ${{ matrix.arch }}-osx
            cconfig: RelWithDebInfo
      fail-fast: false
    name: native ${{ matrix.os }} ${{ matrix.arch }} lib

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}

    steps:
      
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: friendlyanon/setup-vcpkg@v1
      # seems like the absense of commit hash expects vcpkg submodule, i don't want that
      with:
        committish: 8e8a3d7c1a6f7f587b486663b1e814911e6f2342
        # set to false to clear any cache in case of build errors
        cache: false

    #- name: bootstrap vcpkg (windows)
      #if: runner.os == 'Windows'
      #run: vcpkg/bootstrap-vcpkg.bat

    #- name: bootstrap vcpkg (linux and mac)
      #if: (runner.os == 'Linux' || runner.os == 'macOS')
      #run: vcpkg/bootstrap-vcpkg.sh

    - name: configure
      # Build your program with the given configuration
      # run: cmake -B build -S . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      run: cmake -B build -S . -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D "CMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
      working-directory: native

    - name: build
      run: cmake --build build --config ${{ matrix.cconfig }}
      working-directory: native

    - name: debug
      run: ls -R
      working-directory: native


    - uses: actions/upload-artifact@v2
      name: Collect Artifacts
      with:
        name: native
        path: |
          native/bin/*
          #native/build/${{ matrix.cconfig }}/*.dll
          #native/build/*.so
          #native/build/*.dylib

  test-managed:
    runs-on: ${{ matrix.os }}
    needs: build-native
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    name: test on ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: native
        path: native/bin/

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          3.1.x
          6.0.x

    - name: Test
      run: dotnet test managed/IronCompress.sln

  build-managed:
    needs: build-native
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: native
        path: native/bin/

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          3.1.x
          6.0.x

    - name: Build
      run: dotnet build managed/IronCompress.sln -c release /p:Version=${{ env.VERSION }}${{ env.PACKAGE_SUFFIX }} /p:FileVersion=$VERSION /p:AssemblyVersion=$ASM_VERSION

    - uses: actions/upload-artifact@v2
      name: Collect Artifacts
      with:
        name: managed
        path: |
          managed/IronCompress/bin/Release/*

  publish:
    needs: [test-managed, build-managed]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: managed
          path: pub/managed/

      - name: push to nuget.org
        run: dotnet nuget push pub/managed/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

