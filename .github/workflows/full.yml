name: 'Full Flow'

env:
  VERSION: 1.5.2
  PACKAGE_SUFFIX: '-pre.1'
  # PACKAGE_SUFFIX: ''
  ASM_VERSION: 1.0.0
  BUILD_TYPE: Release
  # Indicates the location of the vcpkg as a Git submodule of the project repository.
  #VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  # Tells vcpkg where binary packages are stored.
  # VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

  workflow_dispatch:

jobs:
  # builds native codecs binary for all supported OSes
  build-native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
        arch: [x64, arm64]
        #include:
        #  - os: windows-latest
        #    arch: x86
        exclude:
          # no build agent for Windows ARM
          - os: windows-latest
            arch: arm64
          # no more x64 agent available on GitHub Actions
          - os: macos-latest
            arch: x64
      fail-fast: false
    name: 'build: ${{ matrix.os }} (${{ matrix.arch }})'

    steps:
      
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Windows Env
      if: matrix.os == 'windows-latest'
      run: |
        echo "VCPKG_DEFAULT_VCPKG_TRIPLET=${{ matrix.arch }}-windows-static" >> $env:GITHUB_ENV
        echo "VCPKG_TRIPLET=${{ matrix.arch }}-windows-static" >> $env:GITHUB_ENV
        echo "VCPKG_CONFIG=Release" >> $env:GITHUB_ENV

    - name: Linux Env
      if: matrix.os == 'ubuntu-20.04'
      run: |
        echo "VCPKG_DEFAULT_VCPKG_TRIPLET=${{ matrix.arch }}-linux" >> $GITHUB_ENV
        echo "VCPKG_TRIPLET=${{ matrix.arch }}-linux" >> $GITHUB_ENV
        echo "VCPKG_CONFIG=RelWithDebInfo" >> $GITHUB_ENV

    - name: MacOS Env
      if: matrix.os == 'macos-latest'
      run: |
        echo "VCPKG_DEFAULT_VCPKG_TRIPLET=${{ matrix.arch }}-osx" >> $GITHUB_ENV
        echo "VCPKG_TRIPLET=${{ matrix.arch }}-osx" >> $GITHUB_ENV
        echo "VCPKG_CONFIG=RelWithDebInfo" >> $GITHUB_ENV

    - name: Windows x64
      if: runner.os == 'Windows' && matrix.arch == 'x64'
      run: |
        echo "DOTNET_RID=win-x64" >> $env:GITHUB_ENV

    - name: Windows x32
      if: runner.os == 'Windows' && matrix.arch == 'x86'
      run: |
        echo "VCPKG_DEFAULT_VCPKG_TRIPLET=${{ matrix.arch }}-windows" >> $env:GITHUB_ENV
        echo "VCPKG_TRIPLET=${{ matrix.arch }}-windows" >> $env:GITHUB_ENV
        echo "DOTNET_RID=win-x86" >> $env:GITHUB_ENV
        echo "CMAKE_OPTIONS=-A Win32" >> $env:GITHUB_ENV

    - name: Linux x64
      if: runner.os == 'Linux' && matrix.arch == 'x64'
      run: |
        echo "DOTNET_RID=linux-x64" >> $GITHUB_ENV

    - name: Linux ARM
      if: runner.os == 'Linux' && matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get --yes install g++-aarch64-linux-gnu pkg-config-aarch64-linux-gnu
        echo "CMAKE_OPTIONS=-D CMAKE_SYSTEM_PROCESSOR=aarch64 -D CMAKE_C_COMPILER=$(which aarch64-linux-gnu-gcc) -D CMAKE_CXX_COMPILER=$(which aarch64-linux-gnu-g++)" >> $GITHUB_ENV
        echo "DOTNET_RID=linux-arm64" >> $GITHUB_ENV

    - name: OSX x64
      if: runner.os == 'macOS' && matrix.arch == 'x64'
      run: |
        echo "DOTNET_RID=osx-x64" >> $GITHUB_ENV

    - name: OSX M1
      if: runner.os == 'macOS' && matrix.arch == 'arm64'
      run: |
        echo "CMAKE_OPTIONS=-D CMAKE_OSX_ARCHITECTURES=arm64" >> $GITHUB_ENV
        echo "DOTNET_RID=osx-arm64" >> $GITHUB_ENV

    - uses: friendlyanon/setup-vcpkg@v1
      # seems like the absense of commit hash expects vcpkg submodule, i don't want that
      with:
        committish: 261dd6831673d3b07e5118261f7e161a21d1a759 
        # set to false to clear any cache in case of build errors
        cache: false

    - name: show cmake config
      run: cmake -h
      working-directory: native

    - name: configure
      run: cmake -B build -S . -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D "CMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -D "VCPKG_TARGET_TRIPLET=${{ env.VCPKG_TRIPLET }}" ${{ env.CMAKE_OPTIONS }}
      working-directory: native

    - name: build
      run: cmake --build build --config ${{ env.VCPKG_CONFIG }}
      working-directory: native

    - name: debug
      run: ls -R
      working-directory: native

    - uses: actions/upload-artifact@v3
      name: Collect Artifacts
      with:
        name: native
        path: |
          native/ubin/**/*

  test-managed:
    runs-on: ${{ matrix.os }}
    needs: build-native
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2022, macos-latest, macos-12]
      fail-fast: false
    name: 'test: ${{ matrix.os }}'

    #env:
    #  LD_DEBUG: libs
    #  DYLD_PRINT_LIBRARIES: 1

    steps:

    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: actions/download-artifact@v3
      with:
        name: native
        path: native/ubin/

    - name: debug1
      run: ls -R
      working-directory: native

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          8.0.x

    - name: build
      run: dotnet build managed/IronCompress.sln -c release /p:Version=${{ env.VERSION }}${{ env.PACKAGE_SUFFIX }} /p:FileVersion=$VERSION /p:AssemblyVersion=$ASM_VERSION

    - name: debug2
      run: ls -R
      working-directory: .

    - name: Test
      run: dotnet test managed/IronCompress.sln -c release /p:Version=${{ env.VERSION }}${{ env.PACKAGE_SUFFIX }} /p:FileVersion=$VERSION /p:AssemblyVersion=$ASM_VERSION

  build-managed:
    needs: build-native
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: actions/download-artifact@v2
      with:
        name: native
        path: native/ubin/

    - name: debug
      run: ls -R
      working-directory: native

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          6.0.x
          8.0.x

    - name: Build
      run: dotnet build managed/IronCompress.sln -c release /p:Version=${{ env.VERSION }}${{ env.PACKAGE_SUFFIX }} /p:FileVersion=$VERSION /p:AssemblyVersion=$ASM_VERSION

    - uses: actions/upload-artifact@v2
      name: Collect Artifacts
      with:
        name: managed
        path: |
          managed/IronCompress/bin/Release/*

  publish:
    needs: [test-managed, build-managed]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: nuget
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: managed
          path: pub/managed/

      - name: push to nuget.org
        run: dotnet nuget push pub/managed/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: create gh release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/master'
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          files: "pub/managed/*.nupkg"
          generate_release_notes: true

